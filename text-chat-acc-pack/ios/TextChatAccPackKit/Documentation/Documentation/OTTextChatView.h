//
//  OTTextChatView.h
//
//  Copyright Â© 2016 Tokbox, Inc. All rights reserved.
//

#import <OTTextChatKit/OTTextChatUICustomizator.h>
#import <OTTextChatKit/OTTextMessage.h>

/**
 *  @typedef  TextChatViewEventSignal                  NS_ENUM for the signal generated by the text chat.
 *  @brief    this enum describes the types for event signals send by the text chat
 *  @constant TextChatViewEventSignalDidSendMessage    The component sent a message.
 *  @constant TextChatViewEventSignalDidReceiveMessage The component received a new message.
 *  @constant TextChatViewEventSignalDidConnect        A disconnect was requested and succeeded.
 *  @constant TextChatViewEventSignalDidDisconnect     A new connection was requested and succeeded.
 */
typedef NS_ENUM(NSUInteger, TextChatViewEventSignal) {
    TextChatViewEventSignalDidSendMessage = 0,
    TextChatViewEventSignalDidReceiveMessage,
    TextChatViewEventSignalDidConnect,
    TextChatViewEventSignalDidDisconnect
};

/**
 *  TextChatViewEventBlock type for the various TextChatViewEventSignal signals.
 *
 *  @param signal   NS_ENUM send with one of the signal defined for TextChatViewEventSignal
 *  @param textChat The current message sent or received.
 *  @param error    The error object indicating there is a problem when sending the signal.
 */
typedef void (^TextChatViewEventBlock)(TextChatViewEventSignal signal, OTTextMessage *textChat, NSError *w);

@class OTTextChatView;

@protocol TextChatViewDataSource <NSObject>

- (void)textChatView:(OTTextChatView *)textChatView numberOfRowsInSection:(NSInteger)section;

- (UITableViewCell *)textChatView:(OTTextChatView *)textChatView cellForRowAtIndexPath:(NSIndexPath *)indexPath;
@end

/**
 *  The delegate of a TextChatView object must confirm to the TextChatViewDelegate protocol.
 *  Optional methods of the protocol allow the delegate to notify the connectivity.
 */
@protocol TextChatViewDelegate <NSObject>


/**
 *  Notifies the delegate that the text chat view finished sending the message, with or without an error.
 *
 *  @param textChatView The text chat view object notifying the delegate of this impending event.
 *  @param textChat The text chat message object.
 *  @param error An error object, used by the text chat view, when there is an error sending a message.
 */
- (void)textChatView:(OTTextChatView *)textChatView
     didSendtextChat:(OTTextMessage *)textChat
               error:(NSError *)error;

/**
 *  Notifies the delegate that the text chat view finished receiving the message, with or without an error.
 *
 *  @param textChat The text chat message object.
 *  @param textChatView The text chat view object notifying the delegate of this impending event.
 */
- (void)textChatView:(OTTextChatView *)textChatView
  didReceiveTextChat:(OTTextMessage *)textChat;

@optional

/**
 *  Notifies the delegate the text chat view has established a text chat connection, with or without an error.
 *
 *  @param error An error object. It can contain information related to a connection error, a nil value,
 *               or information indicating a successful connection.
 */
- (void)didConnectWithError:(NSError *)error;

/**
 *  Notifies the delegate that the text chat view has stopped a text chat connection, with or without an error.
 *
 *  @param error An error object. It can contain information related to a disconnect error, a nil value,
 *               or information indicating a connection was successfully closed.
 */
- (void)didDisConnectWithError:(NSError *)error;
@end

@interface OTTextChatView : UIView

/**
 *  Add the configuration detail to your app.
 *
 *  @param apiKey       Your OpenTok API key.
 *  @param sessionId    The session ID of this instance.
 *  @param token        The token generated for this connection.
 */
+ (void)setOpenTokApiKey:(NSString *)apiKey
               sessionId:(NSString *)sessionId
                   token:(NSString *)token;

/**
 *  The object that acts as the delegate of the text chat view.
 *
 *  The delegate must adopt the TextChatViewDelegate protocol. The delegate is not retained.
 */
@property (weak, nonatomic) id<TextChatViewDelegate> delegate;

/**
 *  A boolean value that indicates whether the text chat view is shown or hidden.
 */
@property (readonly, nonatomic, getter=isShown) BOOL show;

/**
 *  The object that manages modifiable user interfaces.
 */
@property (readonly, nonatomic) OTTextChatUICustomizator *customizator;

/**
 *  @return Returns an initialized text chat view object.
 */
+ (instancetype)textChatView;

/**
 *  Returns an initialized text chat view object whose bottom is attached.
 *
 *  @param bottomView The view the TextChat view will attach on top.
 *
 *  @return An initialized text chat view object.
 */
+ (instancetype)textChatViewWithBottomView:(UIView *)bottomView;

/**
 *  Establishes a text chat connection.
 */
- (void)connect;

/**
 *  Establishes a text chat connection with completion.
 *
 *  @param handler NS_ENUM for the various event signals.
 */
- (void)connectWithHandler:(TextChatViewEventBlock)handler;

/**
 *  Stops a text chat connection.
 */
- (void)disconnect;

/**
 *  Shows the text chat view.
 */
- (void)show;

/**
 *  Hides the text chat view.
 */
- (void)dismiss;

/**
 *  Assign an alias to the sender.
 *
 *  @param alias String with the alias of the sender.
 */
- (void)setAlias:(NSString *)alias;

/**
 *  Set the maximum length of characters for a message.
 *
 *  @param length The maximum number of characters allowed for a message.
 */
- (void)setMaximumTextMessageLength:(NSUInteger)length;

@end
