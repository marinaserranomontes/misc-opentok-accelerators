apply plugin: 'com.android.library'
apply plugin: 'maven'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
        project.archivesBaseName = "opentok-android-accelerator-pack"
        project.version = "1.0.12"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    libraryVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.aar')) {
                def fileName = "${archivesBaseName}-${version}.aar"
                output.outputFile = new File(outputFile.parent, fileName)
            }
        }
    }
}

dependencies {
    compile 'com.android.support:appcompat-v7:23.2.1'
    testCompile 'junit:junit:4.+'
    compile 'com.opentok.android:opentok-android-sdk:2.9.+'
    compile 'com.opentok.android:opentok-solutions-logging:+'
}

if (project.hasProperty("MAVEN_USERNAME") && project.hasProperty("MAVEN_PASSWORD")) {
    uploadArchives {
        repositories {
            mavenDeployer {
                repository(url: "https://api.bintray.com/maven/tokbox/maven/${ARTIFACT_ID}/;publish=1") {
                    authentication(userName: MAVEN_USERNAME ? MAVEN_USERNAME : "", password: MAVEN_PASSWORD ? MAVEN_PASSWORD : "")
                }
                def (revision, buildTime) = getRevisionAndTime()
                pom.version = "${version}"
                pom.groupId = 'com.opentok.android'
                pom.artifactId = "${ARTIFACT_ID}"
            }
        }
    }
}

def checkMaven = task("checkUploadArchivesDeps") {
    doFirst {
        if (!project.hasProperty("MAVEN_USERNAME")) {
            throw new GradleException("MAVEN_USERNAME Property not defined")
        }
        if (!project.hasProperty("MAVEN_PASSWORD")) {
            throw new GradleException("MAVEN_PASSWORD Property not defined")
        }
    }
}

uploadArchives.dependsOn checkMaven

def getRevisionAndTime() {
    def date = new Date()
    def hash = 'git rev-parse --verify HEAD'.execute().text.trim()
    TimeZone.setDefault(TimeZone.getTimeZone('PST'))
    def formattedDate = date.format('yyyyMMddHHmmss')
    return ["${hash}".toString(), formattedDate.toString()]
}

